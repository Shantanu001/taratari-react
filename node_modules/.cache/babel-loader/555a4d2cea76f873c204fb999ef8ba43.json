{"ast":null,"code":"var _jsxFileName = \"/Users/shantanujaiswal/Documents/projects/taratari/taratari-react/src/container/Form2.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Form2 = props => {\n  const [showLoader, setLoaderActive] = useState(false); // specify upload params and url for your files\n\n  const getUploadParams = ({\n    meta\n  }) => {\n    return {\n      url: \"https://httpbin.org/post\"\n    };\n  }; // called every time a file's `status` changes\n\n\n  const handleChangeStatus = ({\n    meta,\n    file\n  }, status) => {\n    console.log(status, meta, file);\n\n    if (status === \"uploading\") {\n      setLoaderActive(true);\n    }\n\n    if (status === \"done\") {\n      setLoaderActive(false);\n      console.log(\"url\", meta.previewUrl);\n      getBase64Image(meta.previewUrl, function (result) {\n        console.log(result);\n        let event = {};\n        event.target = {};\n        event.target.name = \"Image\";\n        event.target.value = result;\n        console.log(\"event created\", event);\n        props.onChange(event);\n      });\n    }\n  };\n\n  const getBase64Image = (imgUrl, callback) => {\n    var img = new Image(); // onload fires when the image is fully loadded, and has width and height\n\n    img.onload = function () {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\"),\n          dataURL = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      callback(dataURL); // the base64 string\n    }; // set attributes and src\n\n\n    img.setAttribute(\"crossOrigin\", \"anonymous\"); //\n\n    img.src = imgUrl;\n  }; // receives array of files that are done uploading when submit button is clicked\n\n\n  const handleSubmit = files => {\n    console.log(files.map(f => f.meta));\n  };\n\n  return showLoader ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }\n  }) : /*#__PURE__*/React.createElement(Dropzone, {\n    getUploadParams: getUploadParams,\n    onChangeStatus: handleChangeStatus //onSubmit={handleSubmit}\n    ,\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Form2;","map":{"version":3,"sources":["/Users/shantanujaiswal/Documents/projects/taratari/taratari-react/src/container/Form2.js"],"names":["React","useState","useEffect","Dropzone","CircularProgress","Form2","props","showLoader","setLoaderActive","getUploadParams","meta","url","handleChangeStatus","file","status","console","log","previewUrl","getBase64Image","result","event","target","name","value","onChange","imgUrl","callback","img","Image","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","dataURL","toDataURL","replace","setAttribute","src","handleSubmit","files","map","f"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Form2 = (props) => {\n  const [showLoader,setLoaderActive] = useState(false);\n\n  // specify upload params and url for your files\n  const getUploadParams = ({ meta }) => {\n    return { url: \"https://httpbin.org/post\" };\n  };\n\n  // called every time a file's `status` changes\n  const handleChangeStatus = ({ meta, file }, status) => {\n    console.log(status, meta, file);\n    if (status === \"uploading\") {setLoaderActive(true)}\n    if (status === \"done\") {\n      setLoaderActive(false);\n      console.log(\"url\", meta.previewUrl);\n      getBase64Image(meta.previewUrl, function (result) {\n        console.log(result);\n        let event = {};\n        event.target = {};\n        event.target.name = \"Image\";\n        event.target.value = result;\n        console.log(\"event created\", event);\n        props.onChange(event);\n      });\n    }\n  };\n  const getBase64Image = (imgUrl, callback) => {\n    var img = new Image();\n\n    // onload fires when the image is fully loadded, and has width and height\n\n    img.onload = function () {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\"),\n      dataURL = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      callback(dataURL); // the base64 string\n    };\n\n    // set attributes and src\n    img.setAttribute(\"crossOrigin\", \"anonymous\"); //\n    img.src = imgUrl;\n  };\n\n  // receives array of files that are done uploading when submit button is clicked\n  const handleSubmit = (files) => {\n    console.log(files.map((f) => f.meta));\n  };\n\n  return ( \n    showLoader?<CircularProgress/>:\n    <Dropzone\n      getUploadParams={getUploadParams}\n      onChangeStatus={handleChangeStatus}\n      //onSubmit={handleSubmit}\n      accept=\"image/*\"\n    />)\n    \n};\nexport default Form2;\n"]},"metadata":{},"sourceType":"module"}