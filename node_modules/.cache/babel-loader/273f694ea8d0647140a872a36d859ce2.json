{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"react-dropzone-uploader/dist/styles.css\";import Dropzone from\"react-dropzone-uploader\";import CircularProgress from'@material-ui/core/CircularProgress';var Form2=function Form2(props){//const [showLoader,setLoaderActive] = useState(false);\n// specify upload params and url for your files\nvar getUploadParams=function getUploadParams(_ref){var meta=_ref.meta;return{url:\"https://httpbin.org/post\"};};// called every time a file's `status` changes\nvar handleChangeStatus=function handleChangeStatus(_ref2,status){var meta=_ref2.meta,file=_ref2.file;console.log(status,meta,file);if(status===\"uploading\"){props.showNextButton(true);}if(status===\"done\"){//setLoaderActive(false);\nconsole.log(\"url\",meta.previewUrl);getBase64Image(meta.previewUrl,function(result){console.log(result);var event={};event.target={};event.target.name=\"Image\";event.target.value=result;console.log(\"event created\",event);props.onChange(event);props.showNextButton(false);});}};var getBase64Image=function getBase64Image(imgUrl,callback){var img=new Image();// onload fires when the image is fully loadded, and has width and height\nimg.onload=function(){var canvas=document.createElement(\"canvas\");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext(\"2d\");ctx.drawImage(img,0,0);var dataURL=canvas.toDataURL(\"image/png\"),dataURL=dataURL.replace(/^data:image\\/(png|jpg);base64,/,\"\");callback(dataURL);// the base64 string\n};// set attributes and src\nimg.setAttribute(\"crossOrigin\",\"anonymous\");//\nimg.src=imgUrl;};// receives array of files that are done uploading when submit button is clicked\nvar handleSubmit=function handleSubmit(files){console.log(files.map(function(f){return f.meta;}));};return/*#__PURE__*/React.createElement(Dropzone,{getUploadParams:getUploadParams,onChangeStatus:handleChangeStatus//onSubmit={handleSubmit}\n,accept:\"image/*\"});};export default Form2;","map":{"version":3,"sources":["/Users/shantanujaiswal/Documents/projects/taratari/taratari-react/src/container/Form2.js"],"names":["React","useState","useEffect","Dropzone","CircularProgress","Form2","props","getUploadParams","meta","url","handleChangeStatus","status","file","console","log","showNextButton","previewUrl","getBase64Image","result","event","target","name","value","onChange","imgUrl","callback","img","Image","onload","canvas","document","createElement","width","height","ctx","getContext","drawImage","dataURL","toDataURL","replace","setAttribute","src","handleSubmit","files","map","f"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"react-dropzone-uploader/dist/styles.css\";\nimport Dropzone from \"react-dropzone-uploader\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Form2 = (props) => {\n  //const [showLoader,setLoaderActive] = useState(false);\n\n  // specify upload params and url for your files\n  const getUploadParams = ({ meta }) => {\n    return { url: \"https://httpbin.org/post\" };\n  };\n\n  // called every time a file's `status` changes\n  const handleChangeStatus = ({ meta, file }, status) => {\n    console.log(status, meta, file);\n    if (status === \"uploading\") {props.showNextButton(true);}\n    if (status === \"done\") {\n      //setLoaderActive(false);\n      console.log(\"url\", meta.previewUrl);\n      getBase64Image(meta.previewUrl, function (result) {\n        console.log(result);\n        let event = {};\n        event.target = {};\n        event.target.name = \"Image\";\n        event.target.value = result;\n        console.log(\"event created\", event);\n        props.onChange(event);\n        props.showNextButton(false);\n      });\n    }\n  };\n  const getBase64Image = (imgUrl, callback) => {\n    var img = new Image();\n\n    // onload fires when the image is fully loadded, and has width and height\n\n    img.onload = function () {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(img, 0, 0);\n      var dataURL = canvas.toDataURL(\"image/png\"),\n      dataURL = dataURL.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n      callback(dataURL); // the base64 string\n    };\n\n    // set attributes and src\n    img.setAttribute(\"crossOrigin\", \"anonymous\"); //\n    img.src = imgUrl;\n  };\n\n  // receives array of files that are done uploading when submit button is clicked\n  const handleSubmit = (files) => {\n    console.log(files.map((f) => f.meta));\n  };\n\n  return ( \n    <Dropzone\n      getUploadParams={getUploadParams}\n      onChangeStatus={handleChangeStatus}\n      //onSubmit={handleSubmit}\n      accept=\"image/*\"\n    />)\n    \n};\nexport default Form2;\n"]},"metadata":{},"sourceType":"module"}